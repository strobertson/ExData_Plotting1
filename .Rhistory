demo()
a <- avaliable.packages()
a <- available.packages()
head(rownames(a),3)
library("KernSmooth", lib.loc="/usr/local/Cellar/r/3.5.1/lib/R/library")
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
install.packages("ggplot2")
library(ggpolot2)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages(c("stringr", "reshape2", "ggplot2"))
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
data(iris)
names(iris)
table(iris$Species)
install.packages("ggplot2")
library(ggplot2)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
getOption("repos")
installed.packages()
install.packages("ggplot2")
install.packages("ggplot2", repos="http://cran.rstudio.com/")
install.packages("ggplot2", repos="http://cran.cnr.Berkeley.edu/")
install.packages("ggplot2")
install.packages("Rcpp")
install.packages(c("foreign", "survival"), lib="/usr/local/Cellar/r/3.5.1/lib/R/library")
install.packages("ggplot2")
library("stringi", lib.loc="/usr/local/lib/R/3.5/site-library")
install.packages("ggplot2")
remove.packages("stringi")
install.packages("stringi")
install.packages("ggplot2", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library("ggplot2", lib.loc="/usr/local/lib/R/3.5/site-library")
data(iris)
names(iris)
table(iris$Species)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
#building the classification tree
#install if necessary
install.packages("tree")
tree1 <- tree(Species ~ Sepal.Width + Petal.Width, data = iris)
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width, data = iris)
summary(tree1)
Classification tree:
tree(formula = Species ~ Sepal.Width + Petal.Width, data = iris)
Number of terminal nodes:  5
Residual mean deviance:  0.204 = 29.57 / 145
Misclassification error rate: 0.03333 = 5 / 150
plot(tree1)
text(tree1)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
partition.tree(tree1,label="Species",add=TRUE)
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
summary(tree1)
git clone "https://github.com/strobertson/datasciencecoursera.git"
git clone https://github.com/strobertson/datasciencecoursera.git
data(iris)
names(iris)
table(iris$Species)
install.packages("ggplot2")
library(ggplot2)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
data(iris)
names(iris)
table(iris$Species)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
library("ggplot2", lib.loc="/usr/local/lib/R/3.5/site-library")
data(iris)
names(iris)
table(iris$Species)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
data(iris)
names(iris)
table(iris$Species)
install.packages("ggplot2")
library(ggplot2)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
install.packages("ggplot2")
library("ggplot2", lib.loc="/usr/local/lib/R/3.5/site-library")
data(iris)
names(iris)
table(iris$Species)
library(ggplot2)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width, data = iris)
summary(tree1)
plot(tree1)
text(tree1)
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col=as.numeric(iris$Species))
partition.tree(tree1,label="Species",add=TRUE)
legend(1.75,4.5,legend=unique(iris$Species),col=unique(as.numeric(iris$Species)),pch=19)
View(iris)
View(tree1)
library(datasets)
str(iris)
subset(iris, Species == "setosa")[1:5,]
subset(iris, Species == "versicolor")[1:5,]
subset(iris, Species == "virginica")[1:5,]
# Produce summary statistics for dataset
summary(iris)
# Produce box plot of avaliable variables
par(mar=c(7,5,1,1)) # more space to labels
# Produce box plot of avaliable variables
par(mar=c(7,5,1,1))
boxplot(iris,las=2)
# Produce box plots subset by species
irisVer <- subset(iris, Species == "versicolor")
irisSet <- subset(iris, Species == "setosa")
irisVir <- subset(iris, Species == "virginica")
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(irisVer[,1:4], main="Versicolor",ylim = c(0,8),las=2)
boxplot(irisSet[,1:4], main="Setosa",ylim = c(0,8),las=2)
boxplot(irisVir[,1:4], main="Virginica",ylim = c(0,8),las=2)
# Can also produce historgrames to further explore distribution
hist(iris$Petal.Length)
# Can also produce historgrames to further explore distribution
par(mfrow=c(1,1))
hist(iris$Petal.Length)
# These can also be easily subset to allow us to look at factors by species
par(mfrow=c(1,3))
hist(irisVer$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisSet$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisVir$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
install.packages("vioplot")
install.packages("vioplot", dependencies=TRUE, INSTALL_opts = c('--no-lock')
install.packages("vioplot", dependencies=TRUE, INSTALL_opts = c('--no-lock')
install.packages("vioplot", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library(vioplot)
install.packages("sm", dependencies = TRUE)
install.packages("vioplot", dependencies = TRUE)
install.packages("vioplot")
install.packages("sm")
getwd()
.libPaths()
install.packages("vioplot")
install.packages("vioplot")
install.packages("vioplot")
install.packages("vioplot")
library("tcltk", lib.loc="/usr/local/Cellar/r/3.5.1/lib/R/library")
install.packages("vioplot")
install.packages("tcltk2")
install.packages("vioplot")
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="gray")
# You can also use violin plots to lot at distirbution and statistics at the same time
library(vioplot)
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="gray")
# Now that we know what the data looks like we can start to look for correlations
corr <- cor(iris[,1:4])
round(corr,3)
round(corr,3)
# Scatter matricies can be used to easily visulaise correlation information
pairs(iris[,1:4])
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
# Now that we know understand the factors and how they are related we can start to build
# a algorithm that will allow us to classify future data
library(C50)
install.packages("C50")
# Now that we know understand the factors and how they are related we can start to build
# a algorithm that will allow us to classify future data
library(C50)
input <- iris[,1:4]
output <- iris[,5]
model1 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = TRUE,minCases=1))
plot(model1, main="C5.0 Decision Tree - Unpruned, min=1")
summary(model2)
# Lets try the model again but in a simpler format
model2 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = FALSE))
plot(model2, main="C5.0 Decision Tree - Pruned")
summary(model2)
boxplot(iris,las=2)
# Get column "Species" for all lines where Petal.Length < 2
subset(iris, Petal.Length < 2)[,"Species"]
par(mfrow=c(1,2))
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
library(ggplot2)
par(mfrow=c(1,2))
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
qplot(Petal.Width, Sepal.Width, data=predicted, colour=Species, size=I(4))
# Now that we have the classification model we can predict the class based on observation data
predicted <- predict(model2, iris, type="class")
predicted
library(ggplot2)
par(mfrow=c(1,2))
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
qplot(Petal.Width, Sepal.Width, data=predicted, colour=Species, size=I(4))
qplot(Petal.Width, Sepal.Width, data=predicted, colour=Species, size=I(4))
iris$predictedC501 <- predicted
iris[iris$Species != iris$predictedC501,]
source('~/Example Iris Code.R', echo=TRUE)
# Make dataset avaliable for analysis and show us what we are dealing with
library(datasets, ggplot2)
str(iris)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
ggplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4))
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4), main= "Iris Data Set")
# In order to better understand what is happening we can look at a summary of the model
summary(model2)
source('~/Example Iris Code.R', echo=TRUE)
par(mfrow=c(1,1))
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green")
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green",
main= "Iris Violin Plot")
source('~/Example Iris Code.R', echo=TRUE)
# Make dataset avaliable for analysis and show us what we are dealing with
library(datasets, ggplot2)
str(iris)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4), main= "Iris Data Set")
qplot(Petal.Length, Sepal.Length, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Length")
library(datasets, ggplot2)
str(iris)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Width")
qplot(Petal.Length, Sepal.Length, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Length")
subset(iris, Species == "setosa")[1:5,]
subset(iris, Species == "versicolor")[1:5,]
subset(iris, Species == "virginica")[1:5,]
subset(iris, Petal.Length < 2)[,"Species"]
summary(iris)
par(mar=c(7,5,1,1))
boxplot(iris,las=2)
irisVer <- subset(iris, Species == "versicolor")
irisSet <- subset(iris, Species == "setosa")
irisVir <- subset(iris, Species == "virginica")
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(irisVer[,1:4], main="Versicolor",ylim = c(0,8),las=2)
boxplot(irisSet[,1:4], main="Setosa",ylim = c(0,8),las=2)
boxplot(irisVir[,1:4], main="Virginica",ylim = c(0,8),las=2)
par(mfrow=c(1,1))
hist(iris$Petal.Length)
par(mfrow=c(1,3))
hist(irisVer$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisSet$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisVir$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
library(vioplot)
par(mfrow=c(1,1))
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green")
corr <- cor(iris[,1:4])
round(corr,3)
pairs(iris[,1:4])
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
library(C50)
input <- iris[,1:4]
output <- iris[,5]
model1 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = TRUE,minCases=1))
plot(model1, main="C5.0 Decision Tree - Unpruned, min=1")
model2 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = FALSE))
plot(model2, main="C5.0 Decision Tree - Pruned")
summary(model2)
predicted <- predict(model2, iris, type="class")
predicted
iris$predictedC501 <- predicted
iris[iris$Species != iris$predictedC501,]
source('~/Example Iris Code.R', echo=TRUE)
setwd("~/R Programming/Coursera/ExData_Plotting1")
?read.table
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
View(power_con)
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
str(power_con)
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
hist(power_con$Global_active_power)
?hist
hist(power_con$Global_active_power, col = "Red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
?png
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
plot(power_con$Date, power_con$Global_active_power)
plot(power_con$Time, power_con$Global_active_power)
View(power_con)
library(lubridate)
power_con <- mutate(power_con, Datetime = ymd(Date) + hms(Time))
power_con$Datetime <- ymd(power_con$Date) + hms(power_con$Time)
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
source('~/R Programming/Coursera/ExData_Plotting1/plot1.R')
plot(power_con$Datetime, power_con$Global_active_power)
?plot
plot(power_con$Datetime, power_con$Global_active_power, type = "l")
source('~/R Programming/Coursera/ExData_Plotting1/plot2.R')
png(filename = "plot2.png", width = 480, height = 480)
# Generate graph
plot(x = power_con$Datetime,
y = power_con$Global_active_power,
type = "l",
xlab = "",
ylab = "Global Active Power (kilowatts)")
# Save graph to png file
dev.off()
# End of step message
message("Graph generated and saved to working directory as plot2.png")
png(filename = "plot1.png", width = 480, height = 480)
# Generate graph
hist(power_con$Global_active_power,
col = "Red",
main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
# Save graph to png file
dev.off()
# End of step message
message("Graph generated and saved to working directory as plot1.png")
plot(power_con$Datetime, c(power_con$, type = "l")
plot(power_con$Datetime, c(power_con$Sub_metering_1, type = "l")
